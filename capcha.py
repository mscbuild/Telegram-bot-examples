import asyncio
import time
from collections import defaultdict
from datetime import datetime, timedelta

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    ChatPermissions,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "8098160840:AAFtH0mGJ4yy7RTHmScALd6c66vq_KWIbxw"
log_channel_id = -1002509686305  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –ª–æ–≥-–∫–∞–Ω–∞–ª–∞
max_messages = 5
per_seconds = 10
CAPTCHA_ANSWER = "–∞–≤–≥—É—Å—Ç"

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
user_langs = {}  # user_id -> 'ru' –∏–ª–∏ 'en'
user_messages = defaultdict(list)  # user_id -> list[float(timestamp)]
warnings = defaultdict(lambda: {"count": 0})
pending_captcha = {}  # user_id -> chat_id

# --- –Ø–∑—ã–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞—Ä–∏ ---
LANGS = {
    "ru": {
        "captcha_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ '–∞–≤–≥—É—Å—Ç' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "captcha_passed": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        "captcha_failed": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "captcha_kick": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω.",
    },
    "en": {
        "captcha_prompt": "Please prove you are not a bot.\nType the word '–∞–≤–≥—É—Å—Ç' to confirm.",
        "captcha_passed": "‚úÖ Thank you! You passed the verification.",
        "captcha_failed": "‚ùå Wrong answer. Please try again.",
        "captcha_kick": "User {0} failed the captcha and was removed.",
    },
}

DELETE_BUTTONS_DELAY = 7 * 60  # 7 –º–∏–Ω—É—Ç


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_lang(update: Update) -> str:
    user_id = update.effective_user.id
    return user_langs.get(user_id, "en")


async def is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    member = await context.bot.get_chat_member(chat_id, user_id)
    return member.status in ["administrator", "creator"]


async def delete_message_later(bot, chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except:
        pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤


async def send_captcha(chat_id, user_id, member, context: ContextTypes.DEFAULT_TYPE):
    lang = user_langs.get(user_id, "en")
    t = LANGS[lang]

    await context.bot.send_message(
        chat_id=chat_id,
        text=t["captcha_prompt"],
    )

    pending_captcha[user_id] = chat_id

    await asyncio.sleep(60)

    if user_id in pending_captcha:
        # –ù–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É ‚Äî –±–∞–Ω –∏ —Ä–∞–∑–±–∞–Ω (–∫–∏–∫)
        await context.bot.ban_chat_member(chat_id, user_id)
        await context.bot.unban_chat_member(chat_id, user_id)
        del pending_captcha[user_id]
        await context.bot.send_message(
            chat_id,
            text=t["captcha_kick"].format(member.first_name),
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await set_lang(update, context)


async def set_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
            InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:", reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ ---

async def on_lang_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data.startswith("set_lang_"):
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /lang –∏–ª–∏ /start
        lang = query.data.split("_")[2]
        user_langs[user_id] = lang
        await query.edit_message_text(
            "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π." if lang == "ru" else "‚úÖ Language set to English."
        )

    elif query.data.startswith("join_lang_"):
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥—Ä—É–ø–ø—É
        lang_code, chat_id_str = query.data.split(":")[0].split("_")[-1], query.data.split(":")[1]
        chat_id = int(chat_id_str)
        user_langs[user_id] = lang_code
        await query.edit_message_text(
            "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π." if lang_code == "ru" else "‚úÖ Language set to English."
        )

        member = query.from_user
        await send_captcha(chat_id, user_id, member, context)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ / –≤—Ö–æ–¥–æ–≤ –≤ –≥—Ä—É–ø–ø—É ---

async def on_user_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member.new_chat_member.user
    chat_id = update.chat_member.chat.id
    user_id = member.id

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞, —á—Ç–æ–±—ã –Ω–µ —Ñ–ª—É–¥–∏–ª
    await context.bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=user_id,
        permissions=ChatPermissions(can_send_messages=False),
    )

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    if user_id not in user_langs:
        keyboard = [
            [
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=f"join_lang_ru:{chat_id}"),
                InlineKeyboardButton("üá¨üáß English", callback_data=f"join_lang_en:{chat_id}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        sent_msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"{member.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / choose your language:",
            reply_markup=reply_markup,
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ 7 –º–∏–Ω—É—Ç
        asyncio.create_task(delete_message_later(context.bot, chat_id, sent_msg.message_id, DELETE_BUTTONS_DELAY))
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—Ä–∞–∑—É –∫–∞–ø—á–∞
        await send_captcha(chat_id, user_id, member, context)


# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message = update.message

    if message is None:
        return  # –ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ)

    text = message.text.lower().strip() if message.text else ""

    lang = get_lang(update)
    t = LANGS[lang]
    now = time.time()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤
    if await is_admin(chat_id, user_id, context):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º—É—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É –Ω–∞—Å —Ç–µ–ø–µ—Ä—å –±–∞–Ω, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ —á–∞—Å—Ç—å –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    # –û—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—ë–º –º—É—Ç

    # –ê–Ω—Ç–∏-—Ñ–ª—É–¥ (–ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º)
    messages = user_messages[user_id]
    messages.append(now)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –Ω–µ —Ä–æ—Å
    while messages and now - messages[0] > per_seconds:
        messages.pop(0)

    if len(messages) >= max_messages:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–ª—É–¥–æ–º
        try:
            await message.delete()
        except:
            pass

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        warnings[user_id]["count"] += 1
        warn_count = warnings[user_id]["count"]

        if warn_count >= 3:
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.ban_chat_member(chat_id, user_id)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{update.effective_user.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º. üö´",
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–Ω –≤ –∫–∞–Ω–∞–ª
                await context.bot.send_message(
                    chat_id=log_channel_id,
                    text=(
                        f"üëÆ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥:\n"
                        f"üë§ ID: `{user_id}`\n"
                        f"üìõ –ò–º—è: {update.effective_user.full_name}\n"
                        f"üí¨ –ß–∞—Ç: {chat_id}\n"
                        f"üö´ –ü—Ä–∏—á–∏–Ω–∞: 3+ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞ {per_seconds} —Å–µ–∫—É–Ω–¥"
                    ),
                    parse_mode="Markdown",
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{update.effective_user.first_name}, –Ω–µ —Ñ–ª—É–¥–∏! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warn_count}/3 ‚ö†Ô∏è",
                reply_to_message_id=message.message_id,
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in pending_captcha:
        if text == CAPTCHA_ANSWER:
            # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                ),
            )
            await message.reply_text(t["captcha_passed"])
            del pending_captcha[user_id]
        else:
            await message.reply_text(t["captcha_failed"])


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("lang", set_lang))

    app.add_handler(CallbackQueryHandler(on_lang_button, pattern="^(set_lang_|join_lang_)"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ ChatMemberHandler
    from telegram.ext import ChatMemberHandler

    app.add_handler(ChatMemberHandler(on_user_join, ChatMemberHandler.CHAT_MEMBER))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –¥—Ä)
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, on_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
