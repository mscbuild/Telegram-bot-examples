import logging
import pandas as pd
import matplotlib.pyplot as plt
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
from datetime import datetime
import io
import os

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CSV_FILE = "finance.csv"
CATEGORIES = ["üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", "üçΩÔ∏è –ï–¥–∞", "üõçÔ∏è –ü–æ–∫—É–ø–∫–∏", "üìé –î—Ä—É–≥–æ–µ"]
currency = "‚Ç¨"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
INCOME_AMOUNT, EXPENSE_CATEGORY, EXPENSE_AMOUNT = range(3)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu():
    keyboard = [
        ["üí∂ –ü—Ä–∏—Ö–æ–¥", "üí∏ –†–∞—Å—Ö–æ–¥"],
        ["üìä –ë–∞–ª–∞–Ω—Å", "üìà –î–∏–∞–≥—Ä–∞–º–º–∞"],
        ["üìÅ –≠–∫—Å–ø–æ—Ä—Ç", "üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –ü–æ–º–æ—â—å\n"
        "/balance ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/report ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç\n"
        "/chart ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "/export ‚Äî –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV\n"
        "/delete_data ‚Äî –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )

# --- –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üí∂ –ü—Ä–∏—Ö–æ–¥":
        return await add_income(update, context)
    elif text == "üí∏ –†–∞—Å—Ö–æ–¥":
        return await add_expense(update, context)
    elif text == "üìä –ë–∞–ª–∞–Ω—Å":
        return await balance(update, context)
    elif text == "üìà –î–∏–∞–≥—Ä–∞–º–º–∞":
        return await chart(update, context)
    elif text == "üìÅ –≠–∫—Å–ø–æ—Ä—Ç":
        return await export_csv(update, context)
    elif text == "üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ":
        return await delete_data(update, context)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö ---
async def delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(CSV_FILE):
        os.remove(CSV_FILE)
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_menu())
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ ---
async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    await update.message.reply_text("üí∂ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_markup)
    return INCOME_AMOUNT

async def save_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    try:
        amount = float(text)
        save_to_csv("–ü—Ä–∏—Ö–æ–¥", amount, None)
        await update.message.reply_text(f"‚úÖ –î–æ—Ö–æ–¥ {amount:.2f}{currency} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_main_menu())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return INCOME_AMOUNT
    return ConversationHandler.END

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ---
async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([[cat] for cat in CATEGORIES] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
    return EXPENSE_CATEGORY

async def get_expense_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    if category == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    if category not in CATEGORIES:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return EXPENSE_CATEGORY
    context.user_data["category"] = category
    reply_markup = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    await update.message.reply_text(f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è '{category}':", reply_markup=reply_markup)
    return EXPENSE_AMOUNT

async def save_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    try:
        amount = float(text)
        category = context.user_data["category"]
        save_to_csv("–†–∞—Å—Ö–æ–¥", amount, category)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount:.2f}{currency} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_main_menu())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return EXPENSE_AMOUNT
    return ConversationHandler.END

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV ---
def save_to_csv(type_, amount, category):
    df = pd.DataFrame([{
        "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "–¢–∏–ø": type_,
        "–°—É–º–º–∞": amount,
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category or ""
    }])
    df.to_csv(CSV_FILE, mode='a', index=False, header=not pd.io.common.file_exists(CSV_FILE))

# --- –ë–∞–ª–∞–Ω—Å ---
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not pd.io.common.file_exists(CSV_FILE):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_menu())
        return

    df = pd.read_csv(CSV_FILE)
    income = df[df["–¢–∏–ø"] == "–ü—Ä–∏—Ö–æ–¥"]["–°—É–º–º–∞"].sum()
    expense = df[df["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥"]["–°—É–º–º–∞"].sum()
    bal = income - expense
    await update.message.reply_text(
        f"üìä –ë–∞–ª–∞–Ω—Å: {bal:.2f}{currency}\n"
        f"–î–æ—Ö–æ–¥: {income:.2f}{currency}, –†–∞—Å—Ö–æ–¥: {expense:.2f}{currency}",
        reply_markup=get_main_menu()
    )

# --- –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
async def chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not pd.io.common.file_exists(CSV_FILE):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã.", reply_markup=get_main_menu())
        return

    df = pd.read_csv(CSV_FILE)
    expense_df = df[df["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥"]

    if expense_df.empty:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.", reply_markup=get_main_menu())
        return

    summary = expense_df.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum()
    
    if summary.empty:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=get_main_menu())
        return

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig, ax = plt.subplots()
    summary.plot(kind="pie", autopct="%1.1f%%", ylabel="", ax=ax)
    plt.title("üí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    plt.tight_layout()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
    buf_pie = io.BytesIO()
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
        plt.savefig(buf_pie, format="png")
        buf_pie.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
        plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_photo(photo=buf_pie, reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–∞–≥—Ä–∞–º–º—ã.", reply_markup=get_main_menu())

# --- –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV ---
async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if pd.io.common.file_exists(CSV_FILE):
            with open(CSV_FILE, "rb") as f:
                await update.message.reply_document(document=f, reply_markup=get_main_menu())
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_menu())

# --- –û—Ç–º–µ–Ω–∞ / –ù–∞–∑–∞–¥ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
    app = ApplicationBuilder().token("Your_token").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("chart", chart))
    app.add_handler(CommandHandler("export", export_csv))
    app.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
    income_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∂ –ü—Ä–∏—Ö–æ–¥"), add_income)],
        states={
            INCOME_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_income)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    expense_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí∏ –†–∞—Å—Ö–æ–¥"), add_expense)],
        states={
            EXPENSE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_expense_category)],
            EXPENSE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_expense)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    app.add_handler(income_conv)
    app.add_handler(expense_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.TEXT, handle_button_press))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()

